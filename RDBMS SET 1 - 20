Set: 1

1. Create the Simple DEPARTMENT Table.
CREATE TABLE dept1(  dept_no NUMBER(5), dept_name varchar(20), location varchar(10) );
*********************************************************************
*********************************************************************
*********************************************************************
2. Display structure of department table.
desc dept1;
*********************************************************************
*********************************************************************
*********************************************************************
3. Insert below records into Department Table.

INSERT INTO dept1 VALUES(10,'Account','NY');
INSERT INTO dept1 VALUES(20,'HR','NY');
INSERT INTO dept1 VALUES(30,'Production','DL');
INSERT INTO dept1 VALUES(40,'Sales','NY');
INSERT INTO dept1 VALUES(50,'EDP','MU');
INSERT INTO dept1 VALUES(60,'TRG','AH');
INSERT INTO dept1 VALUES(110,'RND','');
*********************************************************************
*********************************************************************
*********************************************************************
4. Display all records of Department table.

Select * from dept1;
*********************************************************************
*********************************************************************
*********************************************************************
5. Display all department belonging to location 'NY'.
select * from dept1 WHERE location = 'NY' ;
 *********************************************************************
*********************************************************************
*********************************************************************
6. Display details of Department 10.
select * from dept1 where dept_no = 10;
*********************************************************************
*********************************************************************
*********************************************************************
7. List all department names starting with 'A'.
select * from dept1 where dept_name like ‘A%’;
*********************************************************************
*********************************************************************
********************************************************************* 
8. List all departments whose number is between 1 and 100.
select * from dept1 where dept_no between 1 and 100;
*********************************************************************
*********************************************************************
*********************************************************************
9. Delete 'TRG' department.
delete from dept1 where dept_name  = 'TRG';
*********************************************************************
*********************************************************************
*********************************************************************
10. Change department name 'EDP' to 'IT’.
update dept1 set dept_name = 'IT' where dept_name = 'EDP';
*********************************************************************
*********************************************************************
*********************************************************************
*********************************************************************
*********************************************************************
*********************************************************************
						SET: 2
1. Create the EMP Table with all necessary constraints such as in EMP TABLE: Employee id should be primary key, Department no should be foreign key, employee age (birthdate) should be greater than 18 years, salary should be greater than zero, email should have (@ and dot) sign in address, designation of employee can be “manager”, “clerk”, “leader”, “analyst”, “designer”, “coder”, “tester”. 

CREATE TABLE EMPLOYEE1
(
empid int primary key,
emp_name varchar(50),
birth_date date,
gender varchar(10),
dept_no int,
address varchar(100),
designation varchar(15) check(designation IN ('manager', 'clerk', 'leader', 'analyst', 'designer', 'coder','tester')),
salary int check(salary > 0),
experience int,
email varchar(23) check(email like '%@%.%'),
constraint dept_no foreign key (dept_no) references DEPARTMENT (dept_no)
);
*********************************************************************
*********************************************************************
*********************************************************************

2. Create DEPT table with neccessary constraint such as Department no should be primary key, department name should be unique.
CREATE TABLE DEPARTMENT1
(
dept_no int primary key,
dept_name varchar(50) unique,
location varchar(15)
); 

*********************************************************************
*********************************************************************
*********************************************************************
4.After creation of above tables, modify Employee table by adding the constraints as
5. ‘Male’ or ‘Female’ in gender field and display the structure.

alter table EMPLOYEE1 add constraints check_gender check(gender in ('Male','Female'));
*********************************************************************
*********************************************************************
*********************************************************************
6. Insert proper data (at least 5 appropriate records) in all the tables.
Employee1
•	insert into employee1(empid, emp_name, birth_date, gender, dept_no, address, designation, salary,experience, email) values (1,'Raj','23-Jun-1999','Male',1010,'Sahara Darwaja','manager',48950,25,'rajpatel@gmail.com');
•	insert into employee1(empid, emp_name, birth_date, gender, dept_no, address, designation, salary,experience, email) values (2,'Amit','23-Apr-1999','Male',2020,'Amroli','clerk',2800,15,'amitkumar@gmail.com');
•	insert into employee1(empid, emp_name, birth_date, gender, dept_no, address, designation, salary,experience, email) values (3,'Jenisha','23-Mar-1998','Female',3030,'Gurugram','leader',4900,10,'jeishapatel@gmail.com');
•	insert into employee1(empid, emp_name, birth_date, gender, dept_no, address, designation, salary,experience, email) values (4,'Samantha','23-Feb-1999','Female',4040,'Ring Road','analyst',15000,1,'samprabhu@gmail.com');
•	insert into employee1(empid, emp_name, birth_date, gender, dept_no, address, designation, salary,experience, email) values (5,'Mukesh','23-Jan-1999','Male',5050,'Elish Bridge','tester',36200,18,'ambani@gmail.com');
•	insert into employee1(empid, emp_name, birth_date, gender, dept_no, address, designation, salary,experience, email) values (6,'Vipul','23-Dec-1999','Male',6060,'Baben','coder',48950,25,'vipulshah@gmail.com');
Department1
•	insert into department(dept_no,dept_name,locations) values (1010,'Sales','Surat');
•	insert into department(dept_no,dept_name,locations) values (2020,'Devloping','Vapi');
•	insert into department(dept_no,dept_name,locations) values (3030,'Designing','Vyara');
•	insert into department(dept_no,dept_name,locations) values (4040,'Finance','Navsari');
•	insert into department(dept_no,dept_name,locations) values (5050,'Marketing','Ahmedabad');
•	insert into department(dept_no,dept_name,locations) values (6060,'IT','Bardoli');
*********************************************************************
*********************************************************************
*********************************************************************
7. Describe the structure of table created

desc EMPLOYEE1						desc DEPARTMENT
*********************************************************************
*********************************************************************
*********************************************************************
8. List all records of each table in ascending order.
Select * from employee1 order by empid;
 
Select * from department1 order by dept_no; 
*********************************************************************
*********************************************************************
*********************************************************************
9. Delete the department whose location is Ahmedabad.
Delete from department where location = ‘Ahmedabad’;
*********************************************************************
*********************************************************************
*********************************************************************
10. Display the female employee list.
 Select * from employee1 where gender = ‘Female’;
 *********************************************************************
*********************************************************************
*********************************************************************
11.Display the employee department wise.
  Select empid,emp_name,dept_no from employee order by dept_no;
*********************************************************************
*********************************************************************
*********************************************************************
12. Find the names of the employee who has salary less than 5000 and greater than 2000
Select emp_name, salary from employee1 where salary < 5000 and salary > 2000;
 *********************************************************************
*********************************************************************
*********************************************************************
13. Display the names and the designation of all female employee in descending order.
SELECT EMP_NAME,DESIGNATION FROM EMPLOYEE1 WHERE GENDER IN('Female') order by emp_name
*********************************************************************
*********************************************************************
*********************************************************************

14. Display the names of all the employees who names starts with ‘S’ ends with ‘a’.
select emp_name As "Employee Name" from employee1 where emp_name LIKE('S%a')
*********************************************************************
*********************************************************************
*********************************************************************
15. Find the name of employee and salary for those who had obtain minimum salary.
select emp_name,salary from employee1 where salary = (select min(salary) from employee1) 
*********************************************************************
*********************************************************************
*********************************************************************
16. Add 10% raise in salary of all employees whose department is ‘IT’.
update employee1 set salary = (salary +(salary/10)) where dept_no =(select dept_no from department1 where dept_name = 'IT');
*********************************************************************
*********************************************************************
*********************************************************************
17. Count total number of employees of ‘IT’ department.
select count(empid) as ‘Employee of IT Department’ from employee1 where dept_no =( select dept_no from department1 where dept_name = 'IT')
 *********************************************************************
*********************************************************************
*********************************************************************
18. List all employees who born in the current month.
Select * from employee1 where TO_CHAR(birth_date, 'MM') = TO_CHAR(CURRENT_DATE, 'MM');
 *********************************************************************
*********************************************************************
*********************************************************************
19. Print the record of employee and dept table as “Employee works in department ‘MBA’.
select e.emp_name||' works in department '||d.dept_name as Records from employee1 e,department1 d where e.dept_no=d.dept_no;
 *********************************************************************
*********************************************************************
*********************************************************************
20. List names of employees who are fresher’s (less than 1 year of experience)
select emp_name, experience as "Experience Month Wise" from employee1 where experience < 12;

*********************************************************************
*********************************************************************
*********************************************************************
21. Crete Sequence to generate department ID
create sequence myseq
minvalue 1
maxvalue 1000
start with 1
increment by 1;

*********************************************************************
*********************************************************************
*********************************************************************
22. List department wise names of employees who has more than 5 years of experience.
select d.dept_name,e.emp_name,e.experience from department1 d,employee1 e where d.dept_no=e.dept_no and e.experience>=5;
 
*********************************************************************
*********************************************************************
*********************************************************************
23. . List department having no employees
select dept_name from department1 where dept_no not in(select dept_no from employee1);

 
******************************************************************************************************************************************
******************************************************************************************************************************************
******************************************************************************************************************************************
******************************************************************************************************************************************
******************************************************************************************************************************************

*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
SET: 3
1. 1. Create the above three tables along with key constraints.

==>

create table STUDENT
(rollno int primary key, 
sname varchar(20),
class varchar(20), 
birthdate date
)

create table COURSE 
(courseno int primary key, 
coursename varchar(22), 
max_marks int, 
pass_marks int
)


create table stdcourse
(
rollno int foreign key, 
courseno int foreign key, 
marks int
)

*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************

2. Write an Insert script for insertion of rows with substitution variables and insert appropriate data.

insert into student(rollno, sname, class, birthdate) values (1,'Raj Patel','A','23-Jun-99')
insert into student(rollno, sname, class, birthdate) values (2,'Sristi Patel','A','25-Apr-99')
insert into student(rollno, sname, class, birthdate) values (3,'Smit Shah','B','10-Mar-01')
insert into student(rollno, sname, class, birthdate) values (4,'Amit Singh','B','11-Feb-97')
insert into student(rollno, sname, class, birthdate) values (5,'Pirjada Abarar','C','25-Dec-98')
insert into student(rollno, sname, class, birthdate) values (6,'Naveen Panjala','D','16-Sep-00')
insert into student(rollno, sname, class, birthdate) values (7,'Jenish Taniya','C','03-Jul-01')
insert into student(rollno, sname, class, birthdate) values (8,'Ashita Patel','C','03-Aug-01')
insert into student(rollno, sname, class, birthdate) values (9,'Dhriti Taniya','C','03-Feb-02')
insert into student(rollno, sname, class, birthdate) values (10,'Sristi Avaiya','C','03-May-01')
insert into student(rollno, sname, class, birthdate) values (11,'Vipul Patel','C','03-May-80')
insert into student(rollno, sname, class, birthdate) values (12,'Sorathiya Sameer','C','03-May-82')

insert into course values(101,'python','100','36');
insert into course values(102,'dbms','50','15');
insert into course values(103,'com_network','70','26');
insert into course values(104,'data_structure','60','36');
insert into course values(105,'java','90','20');

insert into stdcourse(rollno, courseno, marks) values (1,101,76)
insert into stdcourse(rollno, courseno, marks) values (1,102,86)
insert into stdcourse(rollno, courseno, marks) values (2,103,36)
insert into stdcourse(rollno, courseno, marks) values (3,104,56)
insert into stdcourse(rollno, courseno, marks) values (4,105,56)
insert into stdcourse(rollno, courseno, marks) values (5,101,40)
insert into stdcourse(rollno, courseno, marks) values (6,102,20)
insert into stdcourse(rollno, courseno, marks) values (7,103,96)
insert into stdcourse(rollno, courseno, marks) values (8,104,56)
insert into stdcourse(rollno, courseno, marks) values (9,105,86)
insert into stdcourse(rollno, courseno, marks) values (10,101,66)


*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************

3. Add a constraint that the marks entered should strictly be between 0 and 100.

ALTER TABLE stdcourse
ADD CONSTRAINT marks check( marks > 0 AND marks < 100);


*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************


4.While creating SC table, composite key constraint was forgotten. Add the composite
keynow. 
==>
ALTER TABLE stdcourse
ADD CONSTRAINT composite primary key(rollno,courseno); 

*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************

5.Display details of student who takes ‘Database Management System’ course.
=>

select * from student where rollno IN (select rollno from stdcourse where courseno = (select courseno from course where coursename = 'dbms') )

*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************


6. Display the names of students who have scored more than 70% in Computer
Networksand have not failed in any subject.

select stdcourse.rollno, coursename, student.sname from course,stdcourse,student 
where stdcourse.courseno = course.courseno and marks > 70 and coursename='com_network' and 
stdcourse.rollno not in
  (select rollno from stdcourse, course where marks < course.pass_marks)
 and student.rollno= stdcourse.rollno order by rollno;
 
 
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
7.Display the average marks obtained by each student.

select student.sname , AVG(stdcourse.marks) from student , stdcourse where student.rollno = stdcourse.rollno group by student.sname


*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
*********************************************************************************************************************************
8.Select all courses where passing marks are more than 30% of average maximum mark.

select  * from course where pass_marks > 30 * (select avg(max_marks) from course)/100
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
9.Displaydetails of students who arebornin 1980 or 1982.

select * from student where EXTRACT(Year FROM birthdate) = 1982 or EXTRACT(Year FROM birthdate) = 1980 

**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
10.Create a view that displays student courseno and its corresponding marks

create view jenview as select 



**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************




SET :4

**********************************************************************************************************************************
**********************************************************************************************************************************
Department Table ::

Create table DEPARTMENT
(
dept_no int primary key, 
dept_name varchar(20), 
total_employees int, 
location varchar(20)
)


insert into DEPARTMENT (dept_no, dept_name, total_employees, location ) values( 101,'MCA',10,'Surat');
insert into department values(102,'CE',15,'Navsari');
insert into department values(103,'CIVIL',20,'Daman');
insert into department values(104,'ELECTRICAL',25,'Silvasa');
insert into department values(105,'AUTOMOBILE',5,'Vapi');
insert into department values(106,'IT',0,'PUNE');

**********************************************************************************************************************************
**********************************************************************************************************************************
Employee Table

CREATE table EMPLOYEE 
(
emp_id int primary key, 
emp_name varchar(20),
birth_date date,
gender varchar(10) check(gender IN ('OTHER', 'Other', 'FEMALE', 'Female', 'male','MALE')),
dept_no int,
address varchar(50), 
designation varchar(20),
salary int,
experience float,
email varchar(30) check(email like '%@%.%'),
constraint dept_no foreign key (dept_no) references DEPARTMENT (dept_no)
)

insert into EMPLOYEE values(1,'Raj','23-june-1999','male',101,'Surat','Manager',15600,3,'rpatel@gmail.com');
insert into EMPLOYEE values(2,'Amisha','13-july-1998','Female',101,'Vapi','CEO',35600,1.2,'apatel@gmail.com');
insert into EMPLOYEE values(3,'Naveen','3-june-1990','male',101,'Daman','MD',45600,0.2,'npatel@gmail.com');
insert into EMPLOYEE values(4,'Jenish','1-may-1989','male',101,'Valsad','AD',5600,1.9,'jpatel@gmail.com');
insert into EMPLOYEE values(5,'Smit','25-aug-1982','male',101,'Silvasa','Developer',35600,5.5,'spatel@gmail.com');
insert into EMPLOYEE values(6,'Shyam','23-june-1999','male',102,'Surat','Manager',11600,1,'rpatel@gmail.com');
insert into EMPLOYEE values(7,'Chanchal','13-july-1998','Female',102,'Vapi','CEO',36600,2.2,'apatel@gmail.com');
insert into EMPLOYEE values(8,'Tanu','3-june-1990','Female',102,'Daman','MD',25600,3.2,'npatel@gmail.com');
insert into EMPLOYEE values(9,'Mukesh','1-may-1989','male',102,'Valsad','AD',20300,4.9,'jpatel@gmail.com');
insert into EMPLOYEE values(10,'Parth','25-aug-1982','male',102,'Silvasa','Developer',10600,10.5,'spatel@gmail.com');
insert into EMPLOYEE values(11,'Ghanshyam','23-june-1999','male',102,'Surat','Manager',22600,1,'rpatel@gmail.com');
insert into EMPLOYEE values(12,'Era','13-july-1998','Female',102,'Vapi','CEO',23600,2.2,'apatel@gmail.com');
insert into EMPLOYEE values(13,'Radha','3-june-1990','Female',102,'Daman','MD',19600,3.2,'npatel@gmail.com');
insert into EMPLOYEE values(14,'Amish','1-may-1989','male',103,'Valsad','AD',50360,4.9,'jpatel@gmail.com');
insert into EMPLOYEE values(15,'Pinkesh','25-aug-1982','male',103,'Silvasa','Developer',95600,10.5,'spatel@gmail.com');
insert into EMPLOYEE values(16,'Hiren','23-june-1999','male',104,'Surat','Manager',55600,1,'rpatel@gmail.com');
insert into EMPLOYEE values(17,'Sonalika','13-july-1998','Female',104,'Vapi','CEO',65600,2.2,'apatel@gmail.com');
insert into EMPLOYEE values(18,'Mahi','3-june-1990','Female',104,'Daman','MD',85600,3.2,'npatel@gmail.com');
insert into EMPLOYEE values(19,'Pinku','1-may-1989','male',104,'Valsad','AD',12600,4.9,'jpatel@gmail.com');
insert into EMPLOYEE values(20,'Gogi','25-aug-1982','male',105,'Silvasa','Developer',18600,10.5,'spatel@gmail.com');
*********************************************************** ***********************************************************************
**********************************************************************************************************************************

Project Table

Create table PROJECT
(
proj_id int,
type_of_project varchar(20),
status varchar(20),
start_date date,
emp_id int,
constraint emp_id foreign key (emp_id) references EMPLOYEE(emp_id)
)

insert into Project values(1001,'On Site','Pending','23-Oct-2020',1);
insert into Project values(1002,'At Office','IN Proccess','23-Nov-2018',2);
insert into Project values(1003,'On Site','Complated','23-Jan-2021',3);
insert into Project values(1004,'At Office','Debuging','23-Mar-2015',4);
insert into Project values(1001,'On Site','Pending','23-Oct-2020',5);
insert into Project values(1002,'At Office','IN Proccess','23-Nov-2018',6);
insert into Project values(1003,'On Site','Complated','23-Jan-2021',7);
insert into Project values(1004,'At Office','Debuging','23-Mar-2015',8);
insert into Project values(1001,'On Site','Pending','23OctDec-2020',9);
insert into Project values(1002,'At Office','IN Proccess','23-Nov-2018',10);
insert into Project values(1003,'On Site','Complated','23-Jan-2021',11);
insert into Project values(1004,'At Office','Debuging','23-Mar-2015',12);
insert into Project values(1001,'On Site','Pending','23-Oct-2020',13);
insert into Project values(1002,'At Office','IN Proccess','23-Nov-2018',14);
insert into Project values(1003,'On Site','Complated','23-Jan-2021',15);
insert into Project values(1004,'At Office','Debuging','23-Mar-2015',16);
insert into Project values(1001,'On Site','Pending','23-Oct-2020',17);
insert into Project values(1002,'At Office','IN Proccess','23-Nov-2018',18);
insert into Project values(1003,'On Site','Complated','23-Jan-2021',19);
insert into Project values(1004,'At Office','Debuging','23-Mar-2015',20);

**********************************************************************************************************************************
**********************************************************************************************************************************


1. Delete the department whose total number of employees less than 1.

delete from department where total_employees < 1;

**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************

2. Display the names and the designation of all female employee in descending order.
 
 select emp_name ,designation from employee where gender = 'Female' order by emp_name DESC;
 
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
3.Display the names of all the employees who names starts with ‘A’ ends with ‘A’.
  
select emp_name from employee where emp_name like 'A%a';
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
  4.Find the name of employee and salary for those who had obtain minimum salary.
   
 select emp_name,salary from employee where salary in(select  min(salary)from employee group by dept_no);

**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
5.Count total number of employees of ‘MCA’ department.

select dept_name,total_employees from department where dept_name = 'MCA';


**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************

6.Add 10% raise in salary of all employees whose department is ‘CIVIL’

update employee set salary = salary +(( salary /100)*10) where dept_no = (select dept_no from department where dept_name = 'CIVIL')

**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
7. List all employees who born in the current month.
select * from employee where extract(month from birth_date ) = (SELECT TO_CHAR (SYSDATE, 'MM') FROM DUAL );

**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
8. Print the record of employee and dept table as “Employee works in department ‘CE’.
select emp.emp_name,emp.dept_no,dept.dept_name from employee emp,department dept where dept.dept_no = emp.dept_no and dept.DEPT_NAME = 'CE';
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
9. List names of employees who are fresher’s(less than 1 year of experience).
 select emp_name, EXPERIENCE from employee where EXPERIENCE <= 1;
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
10.List department wise names of employees who has more than 5 years of experience. 

select emp.emp_name, emp.dept_name,emp.experience from employee emp,department dept where dept.dept_no = emp.dept_no and emp.experience > 5;

**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************

11. Write a function which will display total number of projects based on status (pass status as
parameter)
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************

12. Write a procedure that will display list of projects which is going to start today.

**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
13. Write a trigger which do not allow insertion/updation/deletion into Project table if status
type is ‘pending’

**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************

14.
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************

SET : 5

create table HOSTEL 
(
HNO int primary key, 
HNAME varchar, 
HADDR varchar, 
TOTAL_CAPACITY int , 
WARDEN varchar(20)
)
insert into hostel(HNO, HNAME, HADDR, TOTAL_CAPACITY, WARDEN) values(1,'Suman Nivas','ADAJAN',25,'Jamandas Ghariwala');
insert into hostel(HNO, HNAME, HADDR, TOTAL_CAPACITY, WARDEN) values(2,'Chhagan Nivas','Rander',50,'Ramaniklal Chunawala');
insert into hostel(HNO, HNAME, HADDR, TOTAL_CAPACITY, WARDEN) values(3,'Magan Nivas','CityLight',75,'Chunilal Gajiwala');
insert into hostel(HNO, HNAME, HADDR, TOTAL_CAPACITY, WARDEN) values(4,'Gagan Nivas','Parle Point',100,'Chhabildas Gheewala');
insert into hostel(HNO, HNAME, HADDR, TOTAL_CAPACITY, WARDEN) values(5,'Jagat Nivas','Athwa Lines',120,'ChimanLal Jariwala');
**********************************************************************************************************************************
**********************************************************************************************************************************

create table ROOM 
(
HNO int, 
RNO int primary key , 
RTYPE varchar(20),
LOCATION varchar(20), 
NO_OF_STUDENTS int,
STATUS varchar(20),
constraints hno foreign key (HNO) references HOSTEL(HNO)
)

insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (1,11,'double-seated','First Floor',13,'occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (1,12,'single-seated','Second Floor',3,'vacant');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (1,13,'double-seated','Third Floor',5,'non occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (1,14,'single-seated','Forth Floor',22,'occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (1,15,'double-seated','Fifth Floor',1,'occupied');

insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (2,21,'single-seated','First Floor',19,'occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (2,22,'double-seated','Second Floor',13,'vacant');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (2,23,'single-seated','Third Floor',10,'non occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (2,24,'double-seated','Forth Floor',12,'occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (2,25,'single-seated','Fifth Floor',50,'occupied');

insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (3,31,'double-seated','First Floor',31,'occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (3,32,'single-seated','Second Floor',30,'vacant');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (3,33,'double-seated','Third Floor',20,'occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (3,34,'single-seated','Forth Floor',40,'occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (3,35,'double-seated','Fifth Floor',33,'occupied');

insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (4,41,'single-seated','First Floor',3,'occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (4,42,'double-seated','Second Floor',5,'vacant');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (4,43,'single-seated','Third Floor',11,'occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (4,44,'double-seated','Forth Floor',32,'occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (4,45,'single-seated','Fifth Floor',23,'occupied');

insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (5,51,'double-seated','First Floor',13,'occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (5,52,'single-seated','Second Floor',23,'occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (5,53,'double-seated','Third Floor',33,'occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (5,54,'single-seated','Forth Floor',3,'occupied');
insert into ROOM (HNO, RNO, RTYPE, LOCATION, NO_OF_STUDENTS,STATUS) values (5,55,'double-seated','Fifth Floor',10,'vacant');
**********************************************************************************************************************************
**********************************************************************************************************************************
Create Table CHARGES 
(
HNO int, 
RTYPE varchar(20), 
CHARGES int,
constraints hno foreign key (HNO) references HOSTEL(HNO)
);
insert into CHARGES (HNO, RTYPE, CHARGES) values (1,'double-seated',1000);
insert into CHARGES (HNO, RTYPE, CHARGES) values (1,'single-seated',1500);


insert into CHARGES (HNO, RTYPE, CHARGES) values (2,'double-seated',2000);
insert into CHARGES (HNO, RTYPE, CHARGES) values (2,'single-seated',2500);


insert into CHARGES (HNO, RTYPE, CHARGES) values (3,'double-seated',3000);
insert into CHARGES (HNO, RTYPE, CHARGES) values (3,'single-seated',3500);


insert into CHARGES (HNO, RTYPE, CHARGES) values (4,'double-seated',4000);
insert into CHARGES (HNO, RTYPE, CHARGES) values (4,'single-seated',4500);


insert into CHARGES (HNO, RTYPE, CHARGES) values (5,'double-seated',5000);
insert into CHARGES (HNO, RTYPE, CHARGES) values (5,'single-seated',5500);

**********************************************************************************************************************************
**********************************************************************************************************************************
Create table STD 
(
SID int primary key, 
SNAME varchar(20),
MOBILE varchar(20), 
GENDER varchar(20),
FACULTY varchar(20),
DEPT varchar(20),
CLASS varchar(20),
HNO int,
RNO int,
constraints studenthno foreign key (HNO) references HOSTEL(HNO),
constraints RNO foreign key (RNO) references ROOM(RNO)
);

INSERT INTO STD() VALUES(101,'Jenish Taniya','2550550','Male','Science','EC','FY-EC',1,11)
INSERT INTO STD() VALUES(102,'Amit Singh','2550550','Male','Science','EC','FY-EC',1,11)
INSERT INTO STD() VALUES(103,'Jalim Patell','2550550','Male','Science','EC','FY-EC',1,11)
INSERT INTO STD() VALUES(104,'Jenish Taniya','2550550','Male','Science','EC','FY-EC',1,11)
INSERT INTO STD() VALUES(105,'Jenish Taniya','2550550','Male','Science','EC','FY-EC',1,11)

**********************************************************************************************************************************
**********************************************************************************************************************************
Create Table FEES (SID int, 
FDATE date, 
FAMOUNT int,
constraint sid foreign key references STD(SID)
);



**********************************************************************************************************************************
**********************************************************************************************************************************


15. Write a trigger which do not allow to insert or update student record if mobile_no
length is less than 10 digits.


**********************************************************************************************************************************
**********************************************************************************************************************************

16. Write a PL/SQL block which will count total number of student’s gender wise.
Male Students: 999 students
Female Students: 999 students

DECLARE
  gendercount INTEGER;
BEGIN
  
  SELECT count(gender) INTO gendercount
  FROM student where gender = 'Female'; -- Check number of tables
  dbms_output.put_line ('Female Students:'||gendercount ||' students');
  
  SELECT count(gender) INTO gendercount
  FROM student7 where gender = 'male'; -- Check number of tables
  dbms_output.put_line ('Male Students:'||gendercount ||' students');
END;



**********************************************************************************************************************************
**********************************************************************************************************************************
Set : 7
Q : 13
CREATE OR REPLACE PROCEDURE SET7Q13
AS
  CURSOR SET7Q13 IS
  SELECT INO,INAME,EXPIRE_DATE,WEIGHT,PRICE FROM ITEM;
    INO ITEM.INO%TYPE;
    INAME ITEM.INAME%TYPE;
    EXPIRE_DATE ITEM.EXPIRE_DATE%TYPE;
    PRICE ITEM.PRICE%TYPE;
    WEIGHT ITEM.WEIGHT%TYPE;
   BEGIN
    OPEN SET7Q13;
       dbms_output.put_line('----------------------------------------------------');
     dbms_output.put_line('INO | INAME | EXPIRE_DATE | PRICE| WEIGHT | Total');
    dbms_output.put_line('----------------------------------------------------');
      LOOP
        FETCH SET7Q13 INTO INO,INAME,EXPIRE_DATE,PRICE,WEIGHT;
          EXIT WHEN SET7Q13%NOTFOUND;
          dbms_output.put_line('  '||INO ||' | '||INAME ||' |  '|| EXPIRE_DATE ||' | '|| WEIGHT||' | '||PRICE ||' | '||(WEIGHT*PRICE));
           dbms_output.put_line('-----------------------------------------------');
      end loop;
      dbms_output.put_line('Grand Total : ');
    close SET7Q13;
  end;

Set : 9

Tables Application ::
***********************************
Create table APPLICANT 
(
AID int primary key
ANAME varchar(50), 
ADDR varchar(100), 
ABIRTH_DT date
);
insert into Applicant values(1,'Raj Hiravala','Surat','23-Jun-1999');
insert into Applicant values(2,'Jamandas Ghariwala','Surat','15-Jun-1998');
insert into Applicant values(3,'Ramniklal Chunawala','Surat','23-Feb-1997');
insert into Applicant values(4,'Chunilal Gajjiwala','Surat','23-Mar-1996');
insert into Applicant values(5,'Chhabildas Gheewala','Surat','23-Apr-1995');	
insert into Applicant values(6,'Chimanlal Jariwala','Surat','23-Sep-1994');
insert into Applicant values(7,'Kantilal Bodiwala','Surat','23-Oct-1993');
insert into Applicant values(8,'Jayram Bachkaniwala','Surat','23-Nov-1992');
insert into Applicant values(9,'Pritam Hirawla','Surat','23-Dec-1991');


**********************************************************************************************************************************
**********************************************************************************************************************************
Table ENTRANCE_TEST 
**************************************
Create Table ENTRANCE_TEST
(ETID int primary key, 
ETNAME varchar(50), 
MAX_SCORE int, 
CUT_SCORE int
);

insert into ENTRANCE_test values(101,'CMAT',400,140);
insert into ENTRANCE_test values(102,'GMAT',1000,400);
insert into ENTRANCE_test values(103,'KMAT',400,160);
insert into ENTRANCE_test values(104,'JEE',500,200);
insert into ENTRANCE_test values(105,'NEET',400,160);
insert into ENTRANCE_test values(105,'AILET',100,40);
insert into ENTRANCE_test values(106,'AIIMS',100,40);
insert into ENTRANCE_test values(107,'KCET',200,80);
insert into ENTRANCE_test values(108,'Guj-Cet',200,80);


Table :ETEST_CENTRE
****************************************
Create Table ETEST_CENTRE 
(ETCID int primary key, 
LOCATION varchar(20), 
INCHARGE varchar(20), 
CAPACITY int
);


insert into ETEST_CENTRE values(1001,'Surat','Babu Chapri',50);
insert into ETEST_CENTRE values(1002,'Vapi','Bobada Dada',60);
insert into ETEST_CENTRE values(1003,'Valsad','Karim Hatela',70);
insert into ETEST_CENTRE values(1004,'Daman','Aiyaz Takkar',80);
insert into ETEST_CENTRE values(1005,'Silvasa','Chhedi Singh',90);
insert into ETEST_CENTRE values(1006,'Bardoli','Baccha Yadav',100);
insert into ETEST_CENTRE values(1007,'Billimora','Chota Chhatri',110);
insert into ETEST_CENTRE values(1008,'Chikhli','Genda Swami',6);


Table : ETEST_DETAILS 
**********************************

Create ETEST_DETAILS(
AID int, 
ETID int, 
ETCID int, 
ETEST_DT date, 
SCORE int,
constraint AID foreign key (AID) references APPLICANT(AID), 
constraint ETID foreign key (ETID) references ENTRANCE_TEST (ETID),
constraint ETCID foreign key (ETCID) references ETEST_CENTRE (ETCID)
);

Insert into ETEST_DETAILS values(1,101,1001,'25-Jan-2020',398);
Insert into ETEST_DETAILS values(2,102,1002,'25-Jan-2020',988);
Insert into ETEST_DETAILS values(3,103,1003,'25-Jan-2020',399);
Insert into ETEST_DETAILS values(4,104,1004,'25-Jan-2020',499);
Insert into ETEST_DETAILS values(5,105,1005,'25-Jan-2020',398);
Insert into ETEST_DETAILS values(6,106,1006,'25-Jan-2020',99);
Insert into ETEST_DETAILS values(7,107,1007,'25-Jan-2020',198);
Insert into ETEST_DETAILS values(8,108,1008,'25-Jan-2020',200);
Insert into ETEST_DETAILS values(10,109,1008,'25-Jan-2020',178);
Insert into ETEST_DETAILS values(4,109,1008,'25-Jan-2020',178);
Insert into ETEST_DETAILS values(2,101,1002,'25-Jan-2020',988);
Insert into ETEST_DETAILS values(2,103,1002,'25-Jan-2020',988);
Insert into ETEST_DETAILS values(2,104,1002,'25-Jan-2020',988);
Insert into ETEST_DETAILS values(2,105,1002,'25-Jan-2020',988);
Insert into ETEST_DETAILS values(2,106,1002,'25-Jan-2020',988);
Insert into ETEST_DETAILS values(2,107,1002,'25-Jan-2020',988);
Insert into ETEST_DETAILS values(2,108,1002,'25-Jan-2020',988);
Insert into ETEST_DETAILS values(2,109,1002,'25-Jan-2020',988);


**********************************************************************************************************************************
**********************************************************************************************************************************
1.	Modify the APPLICANT table so that every applicant id has an ‘A’ before its value. E.g. if value is ‘1123’, it should become ‘A1123’. .
	Display test center details where no tests were conducted. 
	Display details about applicants who have the same score as that of Ajaykumar in ‘ORACLE FUNDAMENTALS’.
•	ALTER TABLE APPLICANT ADD CHECK (AID LIKE 'A%');
•	SELECT * FROM ETEST_CENTRE WHERE ETCID not in (SELECT ETCID FROM ETEST_DETAILS);
•	select a.aid,a.aname, e.ETNAME, et.SCORE from ETEST_DETAILS et,ENTRANCE_TEST e,ETEST_CENTRE c,Applicant a where et.aid = a.aid and et.etid = e.etid and e.etname = 'ORACLE FUNDAMENTALS' and et.etcid = c.etcid and a.AID IN (SELECT AID FROM ETEST_DETAILS WHERE SCORE = (SELECT  SCORE FROM ETEST_DETAILS WHERE AID = (SELECT AID FROM APPLICANT WHERE ANAME = ' Ajaykumar')));
**********************************************************************************************************************************
**********************************************************************************************************************************
2. Display details of applicants who appeared for all tests

	select * from applicant where aid = (select aid from etest_details group by aid having count(aid) =  (select count(*)  from ( select  etid from etest_details group by  etid) ));
**********************************************************************************************************************************
**********************************************************************************************************************************
3.Display those tests where no applicant has failed.
	select * from entrance_test where etname <> (select e.etname from entrance_test e,etest_details et where e.etid = et.etid and et.score < e.cut_score group by e.etname);
**********************************************************************************************************************************
**********************************************************************************************************************************
4.Display details of entrance test centers which had full attendance between 1 st Oct 15 and 15th Oct 16.
	select * from etest_centre where etcid = (
	select etcid from etest_details where etest_dt >= '1-Jan-20' AND  etest_dt <= '1-Feb-20'  group by etcid having count(etcid) IN 
	(select capacity from etest_centre));
**********************************************************************************************************************************
**********************************************************************************************************************************
5.Display details of the applicants who scored more than the cut score in the tests they appeared in.
	select ed.aid,aname,etname,cut_score,score from etest_details ed, entrance_test et, APPLICANT a  where ed.etid=et.etid  and a.aid = ed.aid and score>cut_score;
**********************************************************************************************************************************
**********************************************************************************************************************************
6. Display average and maximum score test wise of tests conducted at Mumbai.
		*I had change Mumbai with Chikhli*
select max(ed.score) "MAX", avg(ed.score) "AVG" from etest_details ed, etest_centre et where et.location='Chikhli' and et.etcid=ed.etcid group by ed.etid;
**********************************************************************************************************************************
**********************************************************************************************************************************
7.Display the number of applicants who have appeared for each test, test center wise.
	select ed.etid,ed.etcid,count(aid) from etest_details 
	ed group by ed.etid,ed.etcid order by etid;
**********************************************************************************************************************************
**********************************************************************************************************************************
8.Display details about test centers where no tests have been conducted.
	select * from Etest_centre where etcid not in (select etcid from etest_details);
**********************************************************************************************************************************
**********************************************************************************************************************************
9.For tests, which have been conducted between 2-3-17 and 23-4-17, show details of the tests as well as the test Centre.
	select ed.etid, et.etname, et.max_score, et.cut_score, ec.etcid, ec.location, ec.incharge, ec.capacity from etest_details ed, entrance_test et, etest_centre ec where etest_dt>'01-dec-2014' and etest_dt<'30-dec-2014' and et.etid=ed.etid and ec.etcid=ed.etcid;
**********************************************************************************************************************************
**********************************************************************************************************************************
10.How many applicants appeared in the ‘ORACLE FUNDAMENTALS’ test at Chennai in the month of February?
* Chennai was changed with Chikhli and February changed with January
	select count(*) "NO" from etest_details ed, etest_centre ec, entrance_test et where to_char(etest_dt,'mon')='jan' and ec.location='Chikhli' and ec.etcid=ed.etcid and et.etid=ed.etid and etname='ORACLE FUNDAMENTALS' group by ec.etcid;
**********************************************************************************************************************************
**********************************************************************************************************************************
11. Display details about applicants who appeared for tests in the same month as the month in which they were born
	select * from APPLICANT a , etest_details e where a.aid = e.aid and to_char(e.ETEST_DT,'mon') = to_char(a.abirth_dt,'mon') ;
**********************************************************************************************************************************
**********************************************************************************************************************************
12. Display the details about APPLICANTS who have scored the highest in each test, test centre wise.
	select ed.etid,ed.etcid,max(score) from etest_details ed group by ed.etid,ed.etcid order by etid;
**********************************************************************************************************************************
**********************************************************************************************************************************
13. Design a read only view, which has details about applicants and the tests that he has appeared for.
	create view Q13 as select a.aid,aname,et.etid,et.etname from applicant a, etest_details ed,entrance_test et where a.aid=ed.aid and et.etid=ed.etid WITH READ ONLY;
**********************************************************************************************************************************
**********************************************************************************************************************************
14. Write a procedure which will print maximum score centre wise.

CREATE OR REPLACE PROCEDURE SET9Q14
AS
  CURSOR SET9Q14 IS
  SELECT etcid,min(score) as Minimum,max(score) as Maximum FROM etest_details group by etcid;
    etcid etest_details.etcid%TYPE;
    mi etest_details.score%TYPE;
    ma etest_details.score%TYPE;
   BEGIN
    OPEN SET7Q13;
      LOOP
        FETCH SET9Q14 INTO etcid,mi,ma;
          EXIT WHEN SET9Q14%NOTFOUND;
          dbms_output.put_line('  ETCID : '||etcid ||' | Minimum Score '||mi ||' | Maximum Score  '|| ma );
           dbms_output.put_line('-------------------------------------------------------------');
      end loop;
    close SET9Q14;
  end;
**********************************************************************************************************************************
**********************************************************************************************************************************
15. Write a procedure which will print details of entrance test.
--------------------------------------------------------------------------------
	Centre name:________ candidate id:_______ date:_______ score:__________
--------------------------------------------------------------------------------
CREATE OR REPLACE PROCEDURE SET9Q15
AS
  	CURSOR SET9Q15 IS
select a.aname, a.aid ,e.score ,e.etest_dt from applicant a, etest_details e where a.aid = e.aid order by a.aid;
    		aid etest_details.aid%TYPE;
    		aname applicant.aname%TYPE;
score etest_details.score%TYPE;
etest_dt etest_details.etest_dt%TYPE;
   BEGIN
    OPEN SET9Q15;
        LOOP
            		FETCH SET9Q15 INTO aname,aid,score,etest_dt;
            		EXIT WHEN SET9Q15%NOTFOUND;
dbms_output.put_line('----------------------------------------------------------------------------------------------------------------------------');
dbms_output.put_line('  Candidate Name : '||aname ||'          Candidate id: '||aid ||'        Exam Date: '|| etest_dt||Score: '||score );
        end loop;
    close SET9Q15;
  end;

**********************************************************************************************************************************
**********************************************************************************************************************************
16. Write a trigger which do not allow insertion / updation / deletion of Enterance test
details on Sunday

CREATE OR REPLACE TRIGGER SET9Q16 
BEFORE INSERT OR DELETE OR UPDATE ON ETEST_DETAILS
FOR EACH ROW 
BEGIN
    if TO_CHAR(sysdate,'day') = 'sunday ' then
        Raise_application_error(-20100, 'you can not insert today', FALSE);
    end if;
end;
**********************************************************************************************************************************
**********************************************************************************************************************************
SET 10

6. Write a trigger which allow to insert or update the bus capacity only greater than zero
and less than 60.
CREATE OR REPLACE TRIGER SET10Q6
	BEFORE INSERT OR UPDATE ON ROUTEMASTER
DECLARE
	cap number;
begin
	cap := :new.capacity;
	if((cap < 0) AND (cap > 60)) then 
		Raise_application_error(-20021,'Capicity sahi daliye');
	end if;
end;
	
	
**********************************************************************************************************************************
**********************************************************************************************************************************
7. Write a Procedure which will print tour details, a driver is going to take it. ( pass
route_no as parameter)

	
Create or Replace PROCEDURE SET10Q7(rno IN number) IS 
	  CURSOR SET10Q7 IS
		select routeno,origin,destination,distance,capacity,day,vehical from routemaster where routeno = rno ;
		    routeno routemaster.routeno%TYPE;
		    origin routemaster.origin%TYPE;
		    destination routemaster.destination%TYPE;
		    distance routemaster.distance%TYPE;
		    capacity routemaster.capacity%TYPE;
		    day routemaster.day%TYPE;
		    vehical routemaster.vehical%TYPE;
	    BEGIN
    	OPEN SET10Q7;
        	LOOP
		    FETCH SET10Q7 INTO routeno,origin,destination,distance,capacity,day,vehical;
		    EXIT WHEN SET10Q7%NOTFOUND;
		    dbms_output.put_line('       Route No : '||routeno ||'                        Vehicle No  : '||vehical );
		    dbms_output.put_line('-------------------------------------------------------------------------------------------------------------------------------------------------');
		    dbms_output.put_line('      Source          |           Destination         |           Total Days        |         Capacity            |');
		    dbms_output.put_line('-------------------------------------------------------------------------------------------------------------------------------------------------');
		    dbms_output.put_line('      '||origin||'          |           '||destination||'         |           '||day||'         |         '||capacity||'            |');
		    dbms_output.put_line('.');
		    dbms_output.put_line('.');
		    dbms_output.put_line('.');
		end loop;
	    close SET10Q7;
  	end;
	
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************


SET : 11

7. Write a procedure which will print all train details going from Baroda to Banglore.

Create or Replace procedure SET11Q7
AS
    cursor SET11Q7 is
        select tno,tname,arrival,DEPARTURE,SOURCESTATION,ENDSTATION from Train where SOURCESTATION = 'Baroda' and ENDSTATION ='Banglore';
         
         tno train.tno%type;
         tname train.tname%type;
         arrival train.arrival%type;
         DEPARTURE train.DEPARTURE%type;
         SOURCESTATION train.SOURCESTATION%type;
         ENDSTATION train.ENDSTATION%type;
    begin
    open SET11Q7;
        LOOP
            fetch SET11Q7 into tno,tname,arrival,DEPARTURE,SOURCESTATION,ENDSTATION;
            exit when SET11Q7%NOTFOUND;
            dbms_output.put_line('Train No : '||tno);
            dbms_output.put_line('Train Name : '||tname);
            dbms_output.put_line('Arrival Time : '||arrival);
            dbms_output.put_line('Departure Time : '||DEPARTURE);
            dbms_output.put_line('Source Station  : '||SOURCESTATION);
            dbms_output.put_line('End Station : '||Endstation);
        END LOOP;
    close SET11Q7;
end;
**********************************************************************************************************************************
**********************************************************************************************************************************
8. Write a function which will print arrival time and departure time for a given train. (pass train no as a parameter)

create or replace function SET11Q8(trainno in varchar)
return number
is
    arr train.arrival%type;
    dep train.departure%type;
begin
    select departure into dep from train where tno = trainno;
    select arrival into arr from train where tno = trainno;
    dbms_output.put_line('Departure Time is ' || dep);
    dbms_output.put_line('Arrival Tmie is  '|| arr);
    return 0;
end;

**********************************************************************************************************************************
**********************************************************************************************************************************

9. Write a trigger which do not allow to insert or update passenger record if age is greater
than 100

Create or replace trigger SET11Q9
before insert or update on PASSENGER_DETAILS
for each row 
declare
    age PASSENGER_DETAILS.age%Type;
begin 
    age :=  :new.age;
    if age > 100 then
        Raise_application_error(-20099,'Buddhe Not Allowed');
    end if;
end;

**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
SET 12
4. Create a trigger that executes whenever country is updated in CUSTOMER table.
create or replace trigger SET11Q9
before update on customer
for each row
begin 
    if :new.country <> :old.country then 
    dbms_output.put_line('Country is updated');
    end if;
end;
**********************************************************************************************************************************
**********************************************************************************************************************************
5. Create a function to return customer with maximum orders.

***BAki hai***

**********************************************************************************************************************************
**********************************************************************************************************************************

6. Create a procedure to display month names of dates of ORDER table. The month names should be unique.
Create or Replace Procedure SET12Q6
AS
    Cursor SET12Q6 is
        SELECT to_char(odate,'Month') from ord group by to_char(odate,'Month');
    mon varchar(20);
begin
    open SET12Q6;
        loop
            fetch SET12Q6 into mon;
            exit when SET12Q6%NOTFOUND;
            dbms_output.put_line(mon);
        end loop;
    close SET12Q6;
end;
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************

SET 14
1. Write a PLSQL block which will print Employee list (Empno and Name) EMP (empno, empnm, empadd, salary, date_birth, joindt, deptno)
create or replace procedure SET14Q1
AS
    cursor SET14Q1 is
        select empno , ename from emp;
    eno number;
    ename varchar(20);
begin
    open SET14Q1;
        loop
            fetch SET14Q1 into eno,ename;
            exit when SET14Q1%NOTFOUND;
            dbms_output.put_line(eno || '  '||ename);
        end loop;
    close SET14Q1;
end;
**********************************************************************************************************************************
**********************************************************************************************************************************
2. Write a function that returns total number of incomplete jobs, using table 
JOB (jobid, type_of_job, status)
Create or replace function SET14Q2
return number
is 
    con number;
begin
    select count(status) from job where status = 'incomplete';
    return con;
end;

**********************************************************************************************************************************
**********************************************************************************************************************************
3. Write a function which displays the number of items whose weight fall between a given ranges for a particular color using table 
ITEM (itemno, name, color, weight)

**********************************************************************************************************************************
**********************************************************************************************************************************
4. Write a procedure to display top five highest paid workers who are specialized in ‘PAINTING" using table WORKER (workerid, name, wage_per_hour, specialized_in, manager_id)
create or replace procedure SET14Q4
AS
    cursor SET14Q4 is
        select wname,wage_per_hour,specialized_in from worker where specialized_in = 'Painting' order by wage_per_hour desc fetch first 5 rows only;
    wname worker.wname%type;
    wage_per_hour worker.wage_per_hour%type;
    specialized_in worker.specialized_in%type;
begin
    open SET14Q4;
        loop
            fetch SET14Q4 into wname,wage_per_hour,specialized_in;
		    exit when SET14Q4%notfound; 
		    dbms_output.put_line('-------------------------------------------');
		    dbms_output.put_line('      '||wname||' : '||wage_per_hour);
		   end loop;
    close SET14Q4;
    end;
    
    execute SET14Q4;
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
SET 15

EMP (empno, empnm, empadd, salary, date_birth, joindt, deptno)
DEPT (deptno, deptnm)

1.Write a PL/SQL block (table above EMP-DEPT table) which takes as input Department name and displays all the employees of this department who has been working since last five years
Create or replace procedure SET15Q1(dname in varchar)
AS
    cursor  SET15Q1 is
        select e.empno,e.empnm,d.deptnm,e.joindt,trunc(months_between(sysdate,joindt)/12) as Expierence from emp e, dept d where trunc(months_between(sysdate,joindt)/12) > 5 and d.deptno = e.deptno and d.deptnm = dname;
    EMPNO	emp.EMPNO%type;
    EMPNM	emp.EMPNM%type;
    DEPTNM	DEPT.DEPTNM%type;
    JOINDT	emp.JOINDT%type;
    EXPIERENCE number;  
begin 
    open SET15Q1;
        loop
            fetch SET15Q1 into EMPNO,EMPNM,DEPTNM,JOINDT,EXPIERENCE;
            exit when SET15Q1%NOTFOUND;
            dbms_output.put_line('EMPLOYEE NO    : '||EMPNO);
            dbms_output.put_line('EMPLOYEE NAME  : '||EMPNM);
            dbms_output.put_line('DEPARTMENT NAME: '||DEPTNM);
            dbms_output.put_line('JOIN DATE      : '||JOINDT);
            dbms_output.put_line('EXPIERENECE    : '||EXPIERENCE);
            dbms_output.put_line('******************************');        
        END LOOP;
    CLOSE SET15Q1;
END;

begin 
 SET15Q1('Sales');
end;

**********************************************************************************************************************************
**********************************************************************************************************************************

SET 16
EMPMAST (empno, name, pfno, empbasic, deptno, designation)
DEPT (DNO, DNAME)

Rules: HRA = 15% of basic
DA = 50% of basic
Medical = 100
PF = 8.33%of basic
Print Salary slip. Design your own format


Create or replace procedure SET16Q1(eno in int)
AS
    cursor  SET16Q1 is
        select empno, ename, pfno ,empbasic from empmast where empno =eno;
    EMPNO	 empmast.EMPNO%type;
    empname	 empmast.ename%type;
    pfno     empmast.pfno%type;
    basic empmast.empbasic%type;
    finalsal number;
begin 
    open SET16Q1;
        loop
            fetch SET16Q1 into empno, empname, pfno ,basic;
            exit when SET16Q1%NOTFOUND;
            dbms_output.put_line('EMPLOYEE NO    : '||EMPNO);
            dbms_output.put_line('EMPLOYEE NAME  : '||empname);
            dbms_output.put_line('PF No          : '||pfno);
            dbms_output.put_line('Basic Salary   : '||basic);
            finalsal := basic + (basic/100)*15;
            dbms_output.put_line('HRA   15%           : '||(basic/100)*15);
            finalsal := finalsal + basic + (basic/100)*50;
            dbms_output.put_line('DA    50%           : '||(basic/100)*50);
            dbms_output.put_line('Medical             : 100 ₹');
            finalsal := finalsal +100;
            dbms_output.put_line('PF    8.33%         : '||(basic/100)*8.33);
            finalsal := finalsal - (basic/100)*8.33;
            dbms_output.put_line('Total Net Pay       : '||finalsal);
        END LOOP;
    CLOSE SET16Q1;
END;
EXECUTE SET16Q1(2);


**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
SET 17
Consider the Bank schema as
ACCOUNT (AC_NO, NAME, AC_TYPE, BALANCE_AMT, BALANCE_DATE)
TRANSACTION (AC_NO, DATE, TR_TYPE, AMOUNT, PREV_BALANCE, REMARK)
Note: 1. AC_type may be S for saving or C for current, 
2. TR_type may be D for deposit or W for withdrawal.
a. Write a procedure to print the Bank Transaction details by passing from and to dates.

** BAKI CHE **


**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************

SET 18
BRANCH (branch_no, area, city)
MEMBERS (mno, name branch_no, salary, manager_no)
Note: Manager can be from one of the members.
1. Write a procedure which list the name of members who earns more than that of his managers.
Create or replace procedure SET18Q1
AS
    cursor SET18Q1 is
  SELECT w.name,w.salary FROM MEMBERS w, MEMBERS m WHERE w.manager_no = m.mno AND m.salary < w.salary;
    wname MEMBERS.name%type;
    wsalary MEMBERS.salary%type;
begin
    open SET18Q1;
        loop
            fetch SET18Q1 into wname,wsalary;
		    exit when SET18Q1%notfound; 
		    dbms_output.put_line('-------------------------------------------');
		    dbms_output.put_line('      '||wname||' : '||wsalary);
		   end loop;
    close SET18Q1;
    end;
  EXECUTE SET18Q1;

**********************************************************************************************************************************
**********************************************************************************************************************************
2. Write a procedure which gives details of employee having maximum salary branch wise.
Create or replace procedure SET18Q2
AS
    cursor SET18Q2 is
        select mno,branch_no,name,salary from members where (branch_no,salary) in (select branch_no,max(salary) from members group by branch_no);
    mno MEMBERS.mno%type;
    branch_no MEMBERS.branch_no%type;
    name MEMBERS.name%type;
    salary MEMBERS.salary%type;
begin
    open SET18Q2;
        loop
            fetch SET18Q2 into mno,branch_no,name,salary;
		    exit when SET18Q2%notfound; 
		    dbms_output.put_line('-------------------------------------------------');
		    dbms_output.put_line('      '||mno||'      '||branch_no||'      '|| name||'      '||salary);
		   end loop;
    close SET18Q2;
    end;
  EXECUTE SET18Q2;
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************
**********************************************************************************************************************************

SET 19
Employee (eid, fname, lname, salary)
1. Use a Cursor for Loop inside a function to calculate and return total paid salary to all employees by the company.
create or replace function SET19Q1
return number
AS
    cursor SET19Q1 is
      SELECT salary from employee;
      tempsal number := 0;
      salary number;
begin
    open SET19Q1;
        loop
            fetch SET19Q1 into salary;
		    exit when SET19Q1%notfound; 
		    tempsal := tempsal + salary;
		    end loop;
    close SET19Q1;
    return tempsal;
end;
select SET19Q1 from employee fetch first 1 rows only;
**********************************************************************************************************************************
**********************************************************************************************************************************

2. Modify the function created above to become a procedure and display the total paid salary from the procedure itself. Instead of calculating for all employees, calculate only for those
employees whose name starts from a character passed as parameter to the procedure and hence to the cursor.

Create or replace procedure SET19Q2(pattern in varchar)
AS
    cursor SET19Q2 is
        SELECT sum(salary) from employee where lower(fname) like '%'||lower(pattern)||'%' or lower(lname) like '%'||lower(pattern)||'%' ;
    salary number;
begin
    open SET19Q2;
        loop
            fetch SET19Q2 into salary;
		    exit when SET19Q2%notfound; 
    		    dbms_output.put_line('Total Paid Salary is '||salary);
		    end loop;
    close SET19Q2;
end;

execute SET19Q2('K');


